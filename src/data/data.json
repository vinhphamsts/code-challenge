[
  {
    "description": "## Thinkful - Logic Drills: Traffic light\nYou're writing code to control your town's traffic lights. You need a function to handle each change from *`green`*, to *`yellow`*, to *`red`*, and then to *`green`* again.\n\nComplete the function that takes a string as an argument representing the current state of the light and returns a string representing the state the light should change to.\n\nFor example, when the input is *`green`*, output should be *`yellow`*.\n\n",
    "functionName": "updateLight",
    "initCode": "function updateLight(current) {\n\n}",
    "testSuite": [
      {
        "name": "Update light from red to green",
        "input": "'red'",
        "expected": "green"
      },
      {
        "name": "Update light from green to yellow",
        "input": "'green'",
        "expected": "yellow"
      },
      {
        "name": "Update light from yellow to red",
        "input": "'yellow'",
        "expected": "red"
      }
    ]
  },
  {
    "description": "## Square Sum\nComplete the square sum function so that it squares each number passed into it and then sums the results together.\n\nFor example, for **`[1, 2, 2]`** it should return **`9`** because **`1^2 + 2^2 + 2^2 = 9`**.",
    "functionName": "squareSum",
    "initCode": "function squareSum(numbers) {\n\n}",
    "testSuite": [
      {
        "name": "square sum [1, 2]",
        "input": "[1, 2]",
        "expected": 5
      },
      {
        "name": "square sum [0, 3, 4, 5]",
        "input": "[0, 3, 4, 5]",
        "expected": 50
      },
      {
        "name": "square sum []",
        "input": "[]",
        "expected": 0
      },
      {
        "name": "square sum [1, 9, 3, 4, 3, 5, 100, 1039]",
        "input": "[1, 9, 3, 4, 3, 5, 100, 1039]",
        "expected": 1089662
      }
    ]
  },
  {
    "description": "## The highest profit wins!\n ### Story\nBen has a very simple idea to make some profit: he buys something and sells it again. Of course, this wouldn't give him any profit at all if he was simply to buy and sell it at the same price. Instead, he's going to buy it for the lowest possible price and sell it at the highest.\n\n### Task\nWrite a function that returns both the minimum and maximum number of the given list/array.\n\n### Examples (Input --> Output)\n`[1,2,3,4,5] --> [1,5]`\n\n`[2334454,5] --> [5,2334454]`\n\n`[1]         --> [1,1]`\n### Remarks\nAll arrays or lists will always have at least one element, so you don't need to check the length. Also, your function will always get an array or a list, you don't have to check for null, undefined or similar.",
    "functionName": "mixMax",
    "initCode": "function mixMax(arr) {\n\treturn [0,0]; // fix me!\n}",
    "testSuite": [
      {
        "name": "mixMax [1, 2, 3, 4, 5] --> [1, 5]",
        "input": "[1, 2, 3, 4, 5]",
        "expected": "[ 1, 5 ]"
      },
      {
        "name": "mixMax [2334454, 5] --> [5, 2334454]",
        "input": "[2334454, 5]",
        "expected": "[ 5, 2334454 ]"
      },
      {
        "name": "mixMax [1] --> [1, 1]",
        "input": "[1]",
        "expected": "[ 1, 1 ]"
      }
    ]
  },
  {
    "description": "## Disemvowel Trolls\nTrolls are attacking your comment section!\n\nA common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.\n\nYour task is to write a function that takes a string and return a new string with all vowels removed.\n\nFor example, the string \"This website is for losers LOL!\" would become \"Ths wbst s fr lsrs LL!\".\n\n**Note**: for this *`y`* isn't considered a vowel.",
    "functionName": "disemvowel",
    "initCode": "function disemvowel(str) {\n  return str;\n}",
    "testSuite": [
      {
        "name": "disemvowel('This website is for losers LOL!')",
        "input": "'This website is for losers LOL!'",
        "expected": "Ths wbst s fr lsrs LL!"
      },
      {
        "name": "disemvowel('No offense but, Your writing is among the worst I've ever read')",
        "input": "'No offense but, Your writing is among the worst I\\'ve ever read'",
        "expected": "N ffns bt, Yr wrtng s mng th wrst 'v vr rd"
      },
      {
        "name": "disemvowel('What are you, a communist?')",
        "input": "'What are you, a communist?'",
        "expected": "Wht r y,  cmmnst?"
      }
    ]
  },
  {
    "description": "## Two to One\nTake 2 strings *`s1`* and *`s2`* including only letters from *`a`* to *`z`*. Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from *`s1`* or *`s2`*.\n### Example:\n`a = \"xyaabbbccccdefww\"`,\n `b = \"xxxxyyyyabklmopq\"`\n\n`longest(a, b) -> \"abcdefklmopqwxy\"`\n\n`a = \"abcdefghijklmnopqrstuvwxyz\"`\n\n`longest(a, a) -> \"abcdefghijklmnopqrstuvwxyz\"`",
    "functionName": "longest",
    "initCode": "function longest(s1, s2) {\n  // your code\n}",
    "testSuite": [
      {
        "name": "longest(\"aretheyhere\", \"yestheyarehere\")",
        "input": "'aretheyhere', 'yestheyarehere'",
        "expected": "aehrsty"
      },
      {
        "name": "longest(\"loopingisfunbutdangerous\", \"lessdangerousthancoding\")",
        "input": "'loopingisfunbutdangerous', 'lessdangerousthancoding'",
        "expected": "abcdefghilnoprstu"
      },
      {
        "name": "longest(\"inmanylanguages\", \"theresapairoffunctions\")",
        "input": "'inmanylanguages', 'theresapairoffunctions'",
        "expected": "acefghilmnoprstuy"
      }
    ]
  },
  {
    "description": "### Write Number in Expanded Form\nYou will be given a number and you will need to return it as a string in Expanded Form. *For example*:\n\n`expandedForm(12); // Should return '10 + 2'`\n\n`expandedForm(42); // Should return '40 + 2'`\n\n`expandedForm(70304); // Should return '70000 + 300 + 4'`\n\n**NOTE**: All numbers will be whole numbers greater than `0`.",
    "functionName": "expandedForm",
    "initCode": "function expandedForm(num) {\n  // Your code here\n}",
    "testSuite": [
      {
        "name": "expandedForm(12), '10 + 2'",
        "input": 12,
        "expected": "10 + 2"
      },
      {
        "name": "expandedForm(42), '40 + 2'",
        "input": 42,
        "expected": "40 + 2"
      },
      {
        "name": "expandedForm(70304), '70000 + 300 + 4'",
        "input": 70304,
        "expected": "70000 + 300 + 4"
      }
    ]
  }
]